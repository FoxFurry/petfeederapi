/*
 * PetFeeder Gateway
 *
 * This is PBL VI main gateway
 *
 * API version: 1.2.0
 * Contact: isacartur@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// PlanApiController binds http requests to an api service and writes the service results to the http response
type PlanApiController struct {
	service PlanApiServicer
	errorHandler ErrorHandler
}

// PlanApiOption for how the controller is set up.
type PlanApiOption func(*PlanApiController)

// WithPlanApiErrorHandler inject ErrorHandler into controller
func WithPlanApiErrorHandler(h ErrorHandler) PlanApiOption {
	return func(c *PlanApiController) {
		c.errorHandler = h
	}
}

// NewPlanApiController creates a default api controller
func NewPlanApiController(s PlanApiServicer, opts ...PlanApiOption) Router {
	controller := &PlanApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PlanApiController
func (c *PlanApiController) Routes() Routes {
	return Routes{ 
		{
			"PlanCreate",
			strings.ToUpper("Post"),
			"/plan",
			c.PlanCreate,
		},
		{
			"PlanDelete",
			strings.ToUpper("Delete"),
			"/plan/{plan_uuid}",
			c.PlanDelete,
		},
	}
}

// PlanCreate - Creates a new plan
func (c *PlanApiController) PlanCreate(w http.ResponseWriter, r *http.Request) {
	planCreateRequestParam := PlanCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&planCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPlanCreateRequestRequired(planCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PlanCreate(r.Context(), planCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PlanDelete - Delete a plan with specified UUID
func (c *PlanApiController) PlanDelete(w http.ResponseWriter, r *http.Request) {
	planUuidParam := chi.URLParam(r, "plan_uuid")
	
	result, err := c.service.PlanDelete(r.Context(), planUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
