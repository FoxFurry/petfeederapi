/*
 * PetFeeder Gateway
 *
 * This is PBL VI main gateway
 *
 * API version: 1.2.0
 * Contact: isacartur@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)



// DeviceApiRouter defines the required methods for binding the api requests to a responses for the DeviceApi
// The DeviceApiRouter implementation should parse necessary information from the http request,
// pass the data to a DeviceApiServicer to perform the required actions, then write the service results to the http response.
type DeviceApiRouter interface { 
	DeviceDelete(http.ResponseWriter, *http.Request)
	DeviceKey(http.ResponseWriter, *http.Request)
	DeviceMetadataGet(http.ResponseWriter, *http.Request)
	DeviceMetadataPatch(http.ResponseWriter, *http.Request)
	DeviceRegister(http.ResponseWriter, *http.Request)
}
// PetApiRouter defines the required methods for binding the api requests to a responses for the PetApi
// The PetApiRouter implementation should parse necessary information from the http request,
// pass the data to a PetApiServicer to perform the required actions, then write the service results to the http response.
type PetApiRouter interface { 
	PetDelete(http.ResponseWriter, *http.Request)
	PetPlanSet(http.ResponseWriter, *http.Request)
	PetRegister(http.ResponseWriter, *http.Request)
}
// PlanApiRouter defines the required methods for binding the api requests to a responses for the PlanApi
// The PlanApiRouter implementation should parse necessary information from the http request,
// pass the data to a PlanApiServicer to perform the required actions, then write the service results to the http response.
type PlanApiRouter interface { 
	PlanCreate(http.ResponseWriter, *http.Request)
	PlanDelete(http.ResponseWriter, *http.Request)
}
// UserApiRouter defines the required methods for binding the api requests to a responses for the UserApi
// The UserApiRouter implementation should parse necessary information from the http request,
// pass the data to a UserApiServicer to perform the required actions, then write the service results to the http response.
type UserApiRouter interface { 
	UserDeviceGet(http.ResponseWriter, *http.Request)
	UserLogin(http.ResponseWriter, *http.Request)
	UserMetadataGet(http.ResponseWriter, *http.Request)
	UserMetadataPatch(http.ResponseWriter, *http.Request)
	UserRegister(http.ResponseWriter, *http.Request)
}


// DeviceApiServicer defines the api actions for the DeviceApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DeviceApiServicer interface { 
	DeviceDelete(context.Context, string) (ImplResponse, error)
	DeviceKey(context.Context, Device) (ImplResponse, error)
	DeviceMetadataGet(context.Context) (ImplResponse, error)
	DeviceMetadataPatch(context.Context, DeviceMetadata) (ImplResponse, error)
	DeviceRegister(context.Context, Device) (ImplResponse, error)
}


// PetApiServicer defines the api actions for the PetApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PetApiServicer interface { 
	PetDelete(context.Context, string) (ImplResponse, error)
	PetPlanSet(context.Context, PetSetPlanRequest) (ImplResponse, error)
	PetRegister(context.Context, PetRegisterRequest) (ImplResponse, error)
}


// PlanApiServicer defines the api actions for the PlanApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PlanApiServicer interface { 
	PlanCreate(context.Context, PlanCreateRequest) (ImplResponse, error)
	PlanDelete(context.Context, string) (ImplResponse, error)
}


// UserApiServicer defines the api actions for the UserApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserApiServicer interface { 
	UserDeviceGet(context.Context) (ImplResponse, error)
	UserLogin(context.Context, UserCredentials) (ImplResponse, error)
	UserMetadataGet(context.Context) (ImplResponse, error)
	UserMetadataPatch(context.Context, UserMetadata) (ImplResponse, error)
	UserRegister(context.Context, UserCredentials) (ImplResponse, error)
}
