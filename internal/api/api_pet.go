/*
 * PetFeeder Gateway
 *
 * This is PBL VI main gateway
 *
 * API version: 1.2.0
 * Contact: isacartur@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// PetApiController binds http requests to an api service and writes the service results to the http response
type PetApiController struct {
	service PetApiServicer
	errorHandler ErrorHandler
}

// PetApiOption for how the controller is set up.
type PetApiOption func(*PetApiController)

// WithPetApiErrorHandler inject ErrorHandler into controller
func WithPetApiErrorHandler(h ErrorHandler) PetApiOption {
	return func(c *PetApiController) {
		c.errorHandler = h
	}
}

// NewPetApiController creates a default api controller
func NewPetApiController(s PetApiServicer, opts ...PetApiOption) Router {
	controller := &PetApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PetApiController
func (c *PetApiController) Routes() Routes {
	return Routes{ 
		{
			"PetDelete",
			strings.ToUpper("Delete"),
			"/pet/{pet_uuid}",
			c.PetDelete,
		},
		{
			"PetPlanSet",
			strings.ToUpper("Post"),
			"/pet/plan",
			c.PetPlanSet,
		},
		{
			"PetRegister",
			strings.ToUpper("Post"),
			"/pet",
			c.PetRegister,
		},
	}
}

// PetDelete - Delete a pet with specified UUID
func (c *PetApiController) PetDelete(w http.ResponseWriter, r *http.Request) {
	petUuidParam := chi.URLParam(r, "pet_uuid")
	
	result, err := c.service.PetDelete(r.Context(), petUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PetPlanSet - Sets plan for existing pet
func (c *PetApiController) PetPlanSet(w http.ResponseWriter, r *http.Request) {
	petSetPlanRequestParam := PetSetPlanRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&petSetPlanRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPetSetPlanRequestRequired(petSetPlanRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PetPlanSet(r.Context(), petSetPlanRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PetRegister - Register a new pet
func (c *PetApiController) PetRegister(w http.ResponseWriter, r *http.Request) {
	petRegisterRequestParam := PetRegisterRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&petRegisterRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPetRegisterRequestRequired(petRegisterRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PetRegister(r.Context(), petRegisterRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
